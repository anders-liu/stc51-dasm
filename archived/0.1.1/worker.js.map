{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/shared/utilities.ts","webpack:///./src/worker/index.ts","webpack:///./src/worker/hex/hex-parser.ts","webpack:///./src/shared/schemas.ts","webpack:///./src/worker/asm51/disassembler.ts","webpack:///./src/worker/asm51/instruction-metadata.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","formatHex","len","suffix","str","toString","toUpperCase","length","repeat","formatU1Hex","formatU2Hex","formatCodeAddress","addr","formatDirectData","data","formatBitData","formatImmediateData","formatImmediateData2","hex_parser_1","disassembler_1","postProgressMessage","progress","error","postMessage","type","onmessage","evt","msg","FileReader","onload","content","options","hex","parseHex","postHexMessage","hexHasError","bin","fillDataBytes","asm","postAsmMessage","dasm","totalBytes","parseHexFile","target","result","ex","message","JSON","stringify","onerror","errMsg","readAsText","file","handleOpenFile","S","U","parseNumberField","text","start","substring","Number","parseInt","hexString","lines","split","map","v","number","line","match","count","address","_a","HexDataType","DATA","EOF","ps","b","push","parseBytesField","checksum","corrected_checksum","reduce","a","amendment","checkSum","parseHexLine","trim","_i","lines_1","cl","lines_2","ln","dataLines","filter","sort","lastLine","hexLine","lineNumber","db","sourceLineNumber","sourceOffset","UniqueOpcode","_md","instructionMetadata","dasmFrom","ctx","hasDasm","inst","getInstAt","isAbsJump","jumpTarget","opcode","isCondJump","isCall","toBeDasm","unshift","bytes","cleanToBeDasm","pop","guessInterupt","insideADasm","sa","sl","b0","mdBytes","oprand1","oprand2","dasmOprand","entry","isIntEntry","ci","ti","jumpSource","isDb","e","isGap","insertDbAndGap","dasmInternal","createAddrOprand","createRelOprand","jmp_target","offset","calculateRelData","raw_data","createDirOprand","createBitOprand","createImmOprand","dasmOpAbs","dasmOpBit","dasmOpBitRel","dasmOpDir","dasmOpDirImm","dasmOpLaddr","dasmOpRel","dasmOpXBit","dasmOpXDir","dasmOpXImm","dasmOpXImmRel","oprand3","dasmOpXNbit","dasmOpXRel","byte1","byte2"],"mappings":"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","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export function formatHex(n: number, len: number, suffix?: boolean): string {\r\n    let str = n.toString(16).toUpperCase();\r\n    if (str.length < len) {\r\n        str = \"0\".repeat(len - str.length) + str;\r\n    }\r\n    if (suffix) {\r\n        str = str + \"h\";\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function formatU1Hex(n: number, suffix?: boolean): string {\r\n    return formatHex(n, 2, suffix);\r\n}\r\n\r\nexport function formatU2Hex(n: number, suffix?: boolean): string {\r\n    return formatHex(n, 4, suffix);\r\n}\r\n\r\nexport function formatCodeAddress(addr: number): string {\r\n    return \"CODE_\" + formatHex(addr, 4);\r\n}\r\n\r\nexport function formatDirectData(data: number): string {\r\n    return formatHex(data, 3, true);\r\n}\r\n\r\nexport function formatBitData(data: number): string {\r\n    return formatHex(data, 3, true);\r\n}\r\n\r\nexport function formatImmediateData(data: number): string {\r\n    return \"#\" + formatHex(data, 3, true);\r\n}\r\n\r\nexport function formatImmediateData2(data: number): string {\r\n    return \"#\" + formatHex(data, 5, true);\r\n}","import * as WM from \"../shared/worker-message\";\r\nimport * as S from \"../shared/schemas\";\r\nimport { parseHex, fillDataBytes, hexHasError } from \"./hex/hex-parser\";\r\nimport { dasm } from \"./asm51/disassembler\";\r\n\r\nonmessage = evt => {\r\n    const msg = evt.data as WM.Message;\r\n\r\n    switch (msg.type) {\r\n        case \"REQ_OPEN_FILE\": handleOpenFile(msg as WM.OpenFileMessage); break;\r\n    }\r\n}\r\n\r\nfunction handleOpenFile(msg: WM.OpenFileMessage): void {\r\n    let r = new FileReader();\r\n    r.onload = evt => {\r\n        try {\r\n            parseHexFile(\r\n                (evt.target as FileReader).result as string,\r\n                msg.options);\r\n            postProgressMessage(\"DONE\");\r\n        } catch (ex) {\r\n            postProgressMessage(\"ERROR\", ex.message || JSON.stringify(ex));\r\n        }\r\n    };\r\n    r.onerror = evt => {\r\n        const errMsg = (evt.target as FileReader).error!.message\r\n        postProgressMessage(\"ERROR\", errMsg);\r\n    }\r\n    postProgressMessage(\"OPENING_FILE\");\r\n    r.readAsText(msg.file);\r\n}\r\n\r\nfunction parseHexFile(content: string, options: S.DasmOptions): void {\r\n    postProgressMessage(\"PARSING_HEX\");\r\n    const hex = parseHex(content);\r\n    postHexMessage(hex);\r\n\r\n    if (hexHasError(hex)) return;\r\n\r\n    postProgressMessage(\"FILLING_DATA_BYTES\");\r\n    const bin = fillDataBytes(hex);\r\n    postDataBytesMessage(bin);\r\n\r\n    postProgressMessage(\"DISASSEMBLING\");\r\n    const asm = dasm(options, bin, hex.totalBytes);\r\n    postAsmMessage(asm);\r\n}\r\n\r\nfunction postProgressMessage(progress: WM.ProgressType, error?: string): void {\r\n    const msg: WM.ProgressMessage = {\r\n        type: \"RES_PORGRESS\",\r\n        progress, error\r\n    };\r\n    postMessage(msg);\r\n}\r\n\r\nfunction postHexMessage(hex: S.HexLineList): void {\r\n    const msg: WM.HexMessage = {\r\n        type: \"RES_HEX\",\r\n        hex\r\n    };\r\n    postMessage(msg);\r\n}\r\n\r\nfunction postDataBytesMessage(data: S.DataByteList): void {\r\n    const msg: WM.DataBytesMessage = {\r\n        type: \"RES_DATA_BYTES\",\r\n        data\r\n    };\r\n    postMessage(msg);\r\n}\r\n\r\nfunction postAsmMessage(asm: S.AsmList): void {\r\n    const msg: WM.AsmMessage = {\r\n        type: \"RES_ASM\",\r\n        asm\r\n    };\r\n    postMessage(msg);\r\n}","import * as S from \"../../shared/schemas\";\r\nimport * as U from \"../../shared/utilities\";\r\n\r\nexport function parseHex(hexString: string): S.HexLineList {\r\n    const lines = hexString\r\n        .split(\"\\n\")\r\n        .map((v, i) => {\r\n            return parseHexLine(i + 1, v.trim());\r\n        });\r\n\r\n    for (const cl of lines) {\r\n        for (const ln of lines) {\r\n            if (cl.number !== ln.number\r\n                && cl.type && ln.type && cl.type.value === ln.type.value\r\n                && cl.address && ln.address && cl.address.value >= ln.address.value\r\n                && ln.count && cl.address.value < ln.address.value + ln.count.value) {\r\n                cl.error = \"HEX_E_OVERLAP\";\r\n            }\r\n        }\r\n    }\r\n\r\n    const dataLines = lines\r\n        .filter(l => l.type && l.type.value === S.HexDataType.DATA)\r\n        .sort((a, b) => a.address!.value - b.address!.value);\r\n    const lastLine = dataLines[dataLines.length - 1];\r\n    const totalBytes = lastLine.address!.value + lastLine.count!.value;\r\n\r\n    let hex: S.HexLineList = { totalBytes };\r\n    lines.map(v => hex[v.number] = v);\r\n    return hex;\r\n}\r\n\r\nfunction parseHexLine(number: number, text: string): S.HexLine {\r\n    let line: S.HexLine = { number, text };\r\n\r\n    if (!text) {\r\n        return line;\r\n    }\r\n\r\n    if (!text.match(/^:([0-9a-f][0-9a-f])+$/i)) {\r\n        line.error = \"HEX_E_FORMAT\";\r\n        return line;\r\n    }\r\n\r\n    if (text.length < 11) {\r\n        line.error = \"HEX_E_LENGTH\";\r\n        return line;\r\n    }\r\n\r\n    let p = 1;\r\n    const count = parseNumberField(text, p, 2);\r\n\r\n    if (text.length != count.value * 2 + 11) {\r\n        line.error = \"HEX_E_LENGTH\";\r\n        return line;\r\n    }\r\n\r\n    p += 2;\r\n    const address = parseNumberField(text, p, 4);\r\n\r\n    p += 4;\r\n    let { str, value } = parseNumberField(text, p, 2);\r\n    const type = { str, value: value as S.HexDataType };\r\n\r\n    if (!(type.value === S.HexDataType.DATA || type.value === S.HexDataType.EOF)) {\r\n        line.error = \"HEX_E_NOT_SUPPORTED\";\r\n    }\r\n\r\n    p += 2;\r\n    const data = parseBytesField(text, p, count.value);\r\n\r\n    p += count.value * 2;\r\n    const checksum = parseNumberField(text, p, 2);\r\n\r\n    const sum = (count.value + (address.value >> 8) + (address.value & 0xFF) + type.value +\r\n        data.value.reduce((a, c) => a + c, 0)) & 0xFF;\r\n    const corrected_checksum = (~sum + 1) & 0xFF;\r\n    if (checksum.value != corrected_checksum) {\r\n        line.error = \"HEX_E_CHECKSUM\";\r\n        line.amendment = U.formatU1Hex(corrected_checksum);\r\n    }\r\n\r\n    line.count = count;\r\n    line.address = address;\r\n    line.type = type;\r\n    line.data = data;\r\n    line.checkSum = checksum;\r\n    return line;\r\n}\r\n\r\nfunction parseNumberField(text: string, start: number, len: number): S.HexField<number> {\r\n    const str = text.substring(start, start + len);\r\n    const value = Number.parseInt(str, 16);\r\n    return { str, value };\r\n}\r\n\r\nfunction parseBytesField(text: string, start: number, count: number): S.HexField<number[]> {\r\n    const str = text.substring(start, start + count * 2);\r\n    let value: number[] = [];\r\n    for (let i = 0; i < count; i++) {\r\n        const ps = start + i * 2;\r\n        const s = text.substring(ps, ps + 2);\r\n        const b = Number.parseInt(s, 16);\r\n        value.push(b);\r\n    }\r\n    return { str, value };\r\n}\r\n\r\nexport function hexHasError(hex: S.HexLineList): boolean {\r\n    for (const key in hex) {\r\n        if (hex[key].error) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function fillDataBytes(hex: S.HexLineList): S.DataByteList {\r\n    let bin: S.DataByteList = {};\r\n    for (const key in hex) {\r\n        const hexLine = hex[key];\r\n        if (!hexLine.type || hexLine.type.value !== S.HexDataType.DATA)\r\n            continue;\r\n\r\n        const lineNumber = hexLine.number;\r\n        const address = hexLine.address!.value;\r\n        const data = hexLine.data!.value;\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n            const db: S.DataByte = {\r\n                sourceLineNumber: lineNumber,\r\n                sourceOffset: i,\r\n                address: address + i,\r\n                data: data[i]\r\n            };\r\n            bin[db.address] = db;\r\n        }\r\n    }\r\n    return bin;\r\n}","export interface HexLine {\r\n    number: number;  // 从1开始\r\n    text: string;\r\n\r\n    count?: HexField<number>;\r\n    address?: HexField<number>;\r\n    type?: HexField<HexDataType>;\r\n    data?: HexField<number[]>;\r\n    checkSum?: HexField<number>;\r\n\r\n    error?: HexError;\r\n    amendment?: string;\r\n}\r\n\r\nexport interface HexField<T> {\r\n    str: string;\r\n    value: T;\r\n}\r\n\r\nexport enum HexDataType {\r\n    DATA,\r\n    EOF,\r\n    EX_SEG_ADDR,  // 暂不支持\r\n    ST_SEG_ADDR,  // 暂不支持\r\n    EX_LIN_ADDR,  // 暂不支持\r\n    ST_LIN_ADDR,  // 暂不支持\r\n}\r\n\r\nexport interface HexLineList {\r\n    [key: number]: HexLine;\r\n    totalBytes: number;\r\n}\r\n\r\nexport type HexError\r\n    = \"HEX_E_CHECKSUM\"\r\n    | \"HEX_E_FORMAT\"\r\n    | \"HEX_E_LENGTH\"\r\n    | \"HEX_E_NO_EOF\"\r\n    | \"HEX_E_NOT_SUPPORTED\"\r\n    | \"HEX_E_OVERLAP\"\r\n    ;\r\n\r\nexport interface DataByte {\r\n    sourceLineNumber: number;\r\n    sourceOffset: number;\r\n    address: number;\r\n    data: number;\r\n}\r\n\r\nexport interface DataByteList {\r\n    [key: number]: DataByte;\r\n}\r\n\r\nexport type OpcodeType\r\n    = \"ACALL\" | \"ADD\" | \"ADDC\" | \"AJMP\" | \"ANL\"\r\n    | \"CJNE\" | \"CLR\" | \"CPL\"\r\n    | \"DA\" | \"DEC\" | \"DIV\" | \"DJNZ\"\r\n    | \"INC\"\r\n    | \"JB\" | \"JBC\" | \"JC\" | \"JMP\" | \"JNB\" | \"JNC\" | \"JNZ\" | \"JZ\"\r\n    | \"LCALL\" | \"LJMP\"\r\n    | \"MOV\" | \"MOVC\" | \"MOVX\" | \"MUL\"\r\n    | \"NOP\"\r\n    | \"ORL\"\r\n    | \"POP\" | \"PUSH\"\r\n    | \"RET\" | \"RETI\"\r\n    | \"RL\" | \"RLC\" | \"RR\" | \"RRC\"\r\n    | \"SETB\" | \"SJMP\" | \"SUBB\" | \"SWAP\"\r\n    | \"XCH\" | \"XCHD\" | \"XRL\"\r\n    | \"<UNKNOWN>\" | \"DB\"\r\n    ;\r\n\r\nexport enum UniqueOpcode {\r\n    NOP, AJMP_PAGE0, LJMP, RR, INC_A, INC_DIR, INC_AT_R0, INC_AT_R1,\r\n    INC_R0, INC_R1, INC_R2, INC_R3, INC_R4, INC_R5, INC_R6, INC_R7,\r\n    JBC, ACALL_PAGE0, LCALL, RRC, DEC_A, DEC_DIR, DEC_AT_R0, DEC_AT_R1,\r\n    DEC_R0, DEC_R1, DEC_R2, DEC_R3, DEC_R4, DEC_R5, DEC_R6, DEC_R7,\r\n    JB, AJMP_PAGE1, RET, RL, ADD_IMM, ADD_DIR, ADD_AT_R0, ADD_AT_R1,\r\n    ADD_R0, ADD_R1, ADD_R2, ADD_R3, ADD_R4, ADD_R5, ADD_R6, ADD_R7,\r\n    JNB, ACALL_PAGE1, RETI, RLC, ADDC_IMM, ADDC_DIR, ADDC_AT_R0, ADDC_AT_R1,\r\n    ADDC_R0, ADDC_R1, ADDC_R2, ADDC_R3, ADDC_R4, ADDC_R5, ADDC_R6, ADDC_R7,\r\n    JC, AJMP_PAGE2, ORL_DIR_A, ORL_DIR_IMM, ORL_IMM, ORL_DIR, ORL_AT_R0, ORL_AT_R1,\r\n    ORL_R0, ORL_R1, ORL_R2, ORL_R3, ORL_R4, ORL_R5, ORL_R6, ORL_R7,\r\n    JNC, ACALL_PAGE2, ANL_DIR_A, ANL_DIR_IMM, ANL_IMM, ANL_DIR, ANL_AT_R0, ANL_AT_R1,\r\n    ANL_R0, ANL_R1, ANL_R2, ANL_R3, ANL_R4, ANL_R5, ANL_R6, ANL_R7,\r\n    JZ, AJMP_PAGE3, XRL_DIR_A, XRL_DIR_IMM, XRL_IMM, XRL_DIR, XRL_AT_R0, XRL_AT_R1,\r\n    XRL_R0, XRL_R1, XRL_R2, XRL_R3, XRL_R4, XRL_R5, XRL_R6, XRL_R7,\r\n    JNZ, ACALL_PAGE3, ORL_C_BIT, JMP, MOV_A_IMM, MOV_DIR_IMM, MOV_AT_R0_IMM, MOV_AT_R1_IMM,\r\n    MOV_R0_IMM, MOV_R1_IMM, MOV_R2_IMM, MOV_R3_IMM, MOV_R4_IMM, MOV_R5_IMM, MOV_R6_IMM, MOV_R7_IMM,\r\n    SJMP, AJMP_PAGE4, ANL_C_BIT, MOVC_PC, DIV, MOV_DIR_DIR, MOV_DIR_AT_R0, MOV_DIR_AT_R1,\r\n    MOV_DIR_R0, MOV_DIR_R1, MOV_DIR_R2, MOV_DIR_R3, MOV_DIR_R4, MOV_DIR_R5, MOV_DIR_R6, MOV_DIR_R7,\r\n    MOV_DPTR_IMM2, ACALL_PAGE4, MOV_BIT_C, MOVC_DPTR, SUBB_IMM, ASUBB_DIR, SUBB_AT_R0, SUBB_AT_R1,\r\n    SUBB_R0, SUBB_R1, SUBB_R2, SUBB_R3, SUBB_R4, SUBB_R5, SUBB_R6, SUBB_R7,\r\n    ORL_C_NBIT, AJMP_PAGE5, MOV_C_BIT, INC_DPTR, MUL, _UNKNOWN_, MOV_AT_R0_DIR, MOV_AT_R1_DIR,\r\n    MOV_R0_DIR, MOV_R1_DIR, MOV_R2_DIR, MOV_R3_DIR, MOV_R4_DIR, MOV_R5_DIR, MOV_R6_DIR, MOV_R7_DIR,\r\n    ANL_C_NBIT, ACALL_PAGE5, CPL_BIT, CPL_C, CJNE_A_IMM, CJNE_A_DIR, CJNE_AT_R0_IMM, CJNE_AT_R1_IMM,\r\n    CJNE_R0_IMM, CJNE_R1_IMM, CJNE_R2_IMM, CJNE_R3_IMM, CJNE_R4_IMM, CJNE_R5_IMM, CJNE_R6_IMM, CJNE_R7_IMM,\r\n    PUSH, AJMP_PAGE6, CLR_BIT, CLR_C, SWAP, XCH_DIR, XCH_AT_R0, XCH_AT_R1,\r\n    XCH_R0, XCH_R1, XCH_R2, XCH_R3, XCH_R4, XCH_R5, XCH_R6, XCH_R7,\r\n    POP, ACALL_PAGE6, SETB_BIT, SETB_C, DA, DJNZ_DIR, XCHD_AT_R0, XCHD_AT_R1,\r\n    DJNZ_R0, DJNZ_R1, DJNZ_R2, DJNZ_R3, DJNZ_R4, DJNZ_R5, DJNZ_R6, DJNZ_R7,\r\n    MOVX_A_AT_DPTR, AJMP_PAGE7, MOVX_A_AT_R0, MOVX_A_AT_R1, CLR_A, MOV_A_DIR, MOV_A_AT_R0, MOV_A_AT_R1,\r\n    MOV_A_R0, MOV_A_R1, MOV_A_R2, MOV_A_R3, MOV_A_R4, MOV_A_R5, MOV_A_R6, MOV_A_R7,\r\n    MOVX_AT_DPTR_A, ACALL_PAGE7, MOVX_AT_R0_A, MOVX_AT_R1_A, CPL_A, MOV_DIR_A, MOV_AT_R0_A, MOV_AT_R1_A,\r\n    MOV_R0_A, MOV_R1_A, MOV_R2_A, MOV_R3_A, MOV_R4_A, MOV_R5_A, MOV_R6_A, MOV_R7_A\r\n}\r\n\r\nexport type NamedOprandType\r\n    = \"@A+DPTR\" | \"@A+PC\" | \"@DPTR\" | \"@R0\" | \"@R1\"\r\n    | \"A\" | \"AB\" | \"C\" | \"DPTR\"\r\n    | \"R0\" | \"R1\" | \"R2\" | \"R3\" | \"R4\" | \"R5\" | \"R6\" | \"R7\"\r\n    ;\r\n\r\nexport type OprandType = \"ADDR\" | \"BIT\" | \"DB\" | \"DIR\" | \"IMM\" | \"NBIT\";\r\n\r\nexport interface TypedOprand {\r\n    type: OprandType;\r\n    length: number;\r\n    data: number;\r\n    str: string;\r\n    // 对于相对地址，data字段保存计算后的结果，也就是最终的目标地址；\r\n    // 而raw_data保存指令中的操作数。\r\n    raw_data?: number;\r\n}\r\n\r\nexport interface DasmOptions {\r\n\r\n}\r\n\r\nexport type InstructionErrorType\r\n    = \"ASM_E_TARGET\"  // 跳转的目标地址不存在\r\n    | \"ASM_E_EOF\"     // 一条指令没分析完就遇到了EOF\r\n    ;\r\n\r\nexport type Instruction\r\n    = RealInstruction\r\n    | DbInstruction\r\n    | GapInstruction\r\n    ;\r\n\r\nexport interface RealInstruction {\r\n    address: number;\r\n    bytes: DataByte[];\r\n    opcode: OpcodeType;\r\n    oprand1?: TypedOprand | NamedOprandType;\r\n    oprand2?: TypedOprand | NamedOprandType;\r\n    oprand3?: TypedOprand | NamedOprandType;\r\n    isAbsJump?: boolean;\r\n    isCondJump?: boolean;\r\n    isCall?: boolean;\r\n    jumpTarget?: number;\r\n    jumpSource?: RealInstruction[];\r\n    isIntEntry?: boolean;\r\n    error?: InstructionErrorType;\r\n}\r\n\r\nexport interface DbInstruction {\r\n    isDb: boolean;\r\n    address: number;\r\n    bytes: DataByte[];\r\n    opcode: OpcodeType;  // DB\r\n    oprand1: TypedOprand;\r\n}\r\n\r\nexport interface GapInstruction {\r\n    isGap: boolean;\r\n    address: number;\r\n    length: number;\r\n}\r\n\r\nexport interface AsmList {\r\n    [address: number]: Instruction;\r\n}\r\n","import * as S from \"../../shared/schemas\";\r\nimport * as U from \"../../shared/utilities\";\r\nimport * as MD from \"./instruction-metadata\";\r\n\r\nconst _md = MD.instructionMetadata;\r\n\r\nexport function dasm(\r\n    options: S.DasmOptions,\r\n    data: S.DataByteList,\r\n    length: number): S.AsmList {\r\n\r\n    let result: S.AsmList = {};\r\n    let toBeDasm: number[] = [];\r\n\r\n    let ctx: DasmContext = {\r\n        options,\r\n        data,\r\n        length,\r\n        toBeDasm,\r\n        result\r\n    };\r\n    dasmInternal(ctx);\r\n    return result;\r\n}\r\n\r\ninterface DasmContext {\r\n    options: S.DasmOptions;\r\n    data: S.DataByteList;\r\n    length: number;\r\n    toBeDasm: number[];  // 遇到有条件跳转时，保存跳转目标地址以供后续反汇编\r\n    result: S.AsmList;\r\n}\r\n\r\ninterface DasmInstructions {\r\n    [address: number]: S.RealInstruction;\r\n}\r\n\r\nfunction dasmInternal(ctx: DasmContext): void {\r\n    // 从入口点开始反汇编\r\n    dasmFrom(0, ctx);\r\n    cleanToBeDasm(ctx);\r\n\r\n    // 查找可能的中断入口并反汇编\r\n    // 目前最新的STC单片机支持最多22个中断（STC8）\r\n    for (let i = 0; i < 22; i++) {\r\n        const entry = 3 + i * 8;  // 中断向量从03h开始，每个入口8字节\r\n\r\n        // 只有入口位置不是空白，或者还没有被反汇编过，\r\n        // 才有可能是一个中断向量，然后需要猜一下\r\n        if (typeof ctx.data[entry] != null\r\n            && !insideADasm(entry, ctx)\r\n            && guessInterupt(entry, ctx)) {\r\n\r\n            dasmFrom(entry, ctx);\r\n            (ctx.result[entry] as S.RealInstruction).isIntEntry = true;\r\n            cleanToBeDasm(ctx);\r\n        }\r\n    }\r\n\r\n    // 插入DB指令、空白位置\r\n    insertDbAndGap(ctx);\r\n}\r\n\r\nfunction dasmFrom(address: number, ctx: DasmContext): void {\r\n    let s: number | undefined = address;\r\n    while (true) {\r\n        if (hasDasm(s, ctx)) {\r\n            // 若果已经反汇编过了，结束\r\n            return;\r\n        } else {\r\n            // 取当前位置的指令\r\n            const inst = getInstAt(s, ctx);\r\n\r\n            if (inst == null) {\r\n                return;\r\n            }\r\n\r\n            // 同时放到反汇编结果列表里\r\n            ctx.result[inst.address] = inst;\r\n\r\n            // 检查跳转、调用类的指令\r\n            if (inst.isAbsJump) {\r\n                // 绝对跳转，检查没问题后直接跳到目标地址\r\n                if (inst.jumpTarget == null) {\r\n                    if (inst.opcode !== \"RET\" && inst.opcode !== \"RETI\") {\r\n                        inst.error = \"ASM_E_TARGET\";\r\n                    }\r\n                    return;\r\n                } else if (ctx.data[inst.jumpTarget] == null) {\r\n                    inst.error = \"ASM_E_TARGET\";\r\n                    return;\r\n                } else {\r\n                    s = inst.jumpTarget;\r\n                }\r\n            } else if (inst.isCondJump || inst.isCall) {\r\n                // 条件跳转，将跳转位置放到toBeDasm队列，然后继续下一条\r\n                if (inst.jumpTarget == null || ctx.data[inst.jumpTarget] == null) {\r\n                    inst.error = \"ASM_E_TARGET\";\r\n                } else {\r\n                    ctx.toBeDasm.unshift(inst.jumpTarget);\r\n                }\r\n                s += inst.bytes.length;\r\n            } else {\r\n                // 普通指令，继续下一条\r\n                s += inst.bytes.length;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction cleanToBeDasm(ctx: DasmContext): void {\r\n    for (let s = ctx.toBeDasm.pop(); s != null; s = ctx.toBeDasm.pop()) {\r\n        dasmFrom(s, ctx);\r\n    }\r\n}\r\n\r\nfunction guessInterupt(address: number, ctx: DasmContext): boolean {\r\n    const inst = getInstAt(address, ctx);\r\n\r\n    if (!inst || inst.opcode !== \"LJMP\") return false;\r\n    return inst.jumpTarget != null\r\n        && ctx.data[inst.jumpTarget] != null\r\n        && !insideADasm(inst.jumpTarget, ctx);\r\n}\r\n\r\nfunction hasDasm(address: number, ctx: DasmContext): boolean {\r\n    return ctx.result[address] != null;\r\n}\r\n\r\n// 判断是否指向某指令的中间\r\nfunction insideADasm(address: number, ctx: DasmContext): boolean {\r\n    for (let s in ctx.result) {\r\n        const sa = Number(s);\r\n        // 指令最长3字节\r\n        if (sa - address > 3) return false;\r\n\r\n        const sl = (ctx.result[s] as S.RealInstruction).bytes.length\r\n        if (address >= sa && address < sa + sl) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction getInstAt(address: number, ctx: DasmContext): S.RealInstruction | null {\r\n    const b0 = ctx.data[address];\r\n    if (b0 == null) {\r\n        return null;\r\n    }\r\n\r\n    const {\r\n        opcode, bytes: mdBytes,\r\n        oprand1, oprand2,\r\n        isAbsJump, isCondJump, isCall,\r\n        dasmOprand\r\n    } = _md[b0.data];\r\n\r\n    if (address + mdBytes > ctx.length) {\r\n        const bytes = [b0];\r\n        return {\r\n            address, bytes, opcode, oprand1, oprand2,\r\n            isAbsJump, isCondJump, isCall,\r\n            error: \"ASM_E_EOF\"\r\n        };\r\n    }\r\n\r\n    let bytes: S.DataByte[] = [];\r\n    for (let i = 0; i < mdBytes; i++) {\r\n        bytes.push(ctx.data[address + i]);\r\n    }\r\n\r\n    let inst: S.RealInstruction = {\r\n        address, bytes, opcode, oprand1, oprand2,\r\n        isAbsJump, isCondJump, isCall\r\n    };\r\n\r\n    if (dasmOprand) {\r\n        dasmOprand(inst);\r\n    }\r\n\r\n    return inst;\r\n}\r\n\r\nfunction insertDbAndGap(ctx: DasmContext): void {\r\n    let s = 0;\r\n    while (s < ctx.length) {\r\n        if (ctx.result[s] != null) {\r\n            // s处有反汇编指令，\r\n            // 回填可能的跳转源，然后跳到下一个位置查看\r\n            const ci = ctx.result[s] as S.RealInstruction;\r\n            const jumpTarget = ci && ci.jumpTarget;\r\n            if (jumpTarget != null && ctx.result[jumpTarget] != null) {\r\n                let ti = ctx.result[jumpTarget] as S.RealInstruction;\r\n                ti.jumpSource = ti.jumpSource || [];\r\n                ti.jumpSource.push(ci);\r\n            }\r\n            s += ci.bytes.length;\r\n        } else {\r\n            if (ctx.data[s] != null) {\r\n                // s处没有反汇编指令，但字节数据中s处有数据\r\n                // 当做DB指令处理\r\n                const db = ctx.data[s];\r\n                let bytes: S.DataByte[] = [db];\r\n                ctx.result[s] = {\r\n                    isDb: true,\r\n                    address: s,\r\n                    bytes,\r\n                    opcode: \"DB\",\r\n                    oprand1: {\r\n                        type: \"DB\",\r\n                        length: 1,\r\n                        data: db.data,\r\n                        str: U.formatU1Hex(db.data)\r\n                    }\r\n                };\r\n                s++;\r\n            } else {\r\n                // s处没有反汇编指令，字节数据里也没有对应数据\r\n                // 当做空白位置处理，找到所有连续的空白位置，合并到一起\r\n                let e = s + 1;\r\n                while (ctx.result[e] == null && ctx.data[e] == null) {\r\n                    e++;\r\n                }\r\n                ctx.result[s] = { address: s, isGap: true, length: e - s };\r\n                s = e;\r\n            }\r\n        }\r\n    }\r\n}","import * as S from \"../../shared/schemas\";\r\nimport * as U from \"../../shared/utilities\";\r\n\r\nexport interface InstructionMetadata {\r\n    opcode: S.OpcodeType;\r\n    bytes: number;\r\n    oprand1?: S.NamedOprandType;\r\n    oprand2?: S.NamedOprandType;\r\n    isAbsJump?: boolean;\r\n    isCondJump?: boolean;\r\n    isCall?: boolean;\r\n    dasmOprand?: (ci: S.RealInstruction) => void;\r\n}\r\n\r\nexport const instructionMetadata: InstructionMetadata[] = [\r\n    { /* 0x00 */ opcode: \"NOP\", bytes: 1 },\r\n    { /* 0x01 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x02 */ opcode: \"LJMP\", bytes: 3, isAbsJump: true, dasmOprand: dasmOpLaddr },\r\n    { /* 0x03 */ opcode: \"RR\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x04 */ opcode: \"INC\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x05 */ opcode: \"INC\", bytes: 2, dasmOprand: dasmOpDir },\r\n    { /* 0x06 */ opcode: \"INC\", bytes: 1, oprand1: \"@R0\" },\r\n    { /* 0x07 */ opcode: \"INC\", bytes: 1, oprand1: \"@R1\" },\r\n    { /* 0x08 */ opcode: \"INC\", bytes: 1, oprand1: \"R0\" },\r\n    { /* 0x09 */ opcode: \"INC\", bytes: 1, oprand1: \"R1\" },\r\n    { /* 0x0A */ opcode: \"INC\", bytes: 1, oprand1: \"R2\" },\r\n    { /* 0x0B */ opcode: \"INC\", bytes: 1, oprand1: \"R3\" },\r\n    { /* 0x0C */ opcode: \"INC\", bytes: 1, oprand1: \"R4\" },\r\n    { /* 0x0D */ opcode: \"INC\", bytes: 1, oprand1: \"R5\" },\r\n    { /* 0x0E */ opcode: \"INC\", bytes: 1, oprand1: \"R6\" },\r\n    { /* 0x0F */ opcode: \"INC\", bytes: 1, oprand1: \"R7\" },\r\n    { /* 0x10 */ opcode: \"JBC\", bytes: 3, isCondJump: true, dasmOprand: dasmOpBitRel },\r\n    { /* 0x11 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x12 */ opcode: \"LCALL\", bytes: 3, isCall: true, dasmOprand: dasmOpLaddr },\r\n    { /* 0x13 */ opcode: \"RRC\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x14 */ opcode: \"DEC\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x15 */ opcode: \"DEC\", bytes: 2, dasmOprand: dasmOpDir },\r\n    { /* 0x16 */ opcode: \"DEC\", bytes: 1, oprand1: \"@R0\" },\r\n    { /* 0x17 */ opcode: \"DEC\", bytes: 1, oprand1: \"@R1\" },\r\n    { /* 0x18 */ opcode: \"DEC\", bytes: 1, oprand1: \"R0\" },\r\n    { /* 0x19 */ opcode: \"DEC\", bytes: 1, oprand1: \"R1\" },\r\n    { /* 0x1A */ opcode: \"DEC\", bytes: 1, oprand1: \"R2\" },\r\n    { /* 0x1B */ opcode: \"DEC\", bytes: 1, oprand1: \"R3\" },\r\n    { /* 0x1C */ opcode: \"DEC\", bytes: 1, oprand1: \"R4\" },\r\n    { /* 0x1D */ opcode: \"DEC\", bytes: 1, oprand1: \"R5\" },\r\n    { /* 0x1E */ opcode: \"DEC\", bytes: 1, oprand1: \"R6\" },\r\n    { /* 0x1F */ opcode: \"DEC\", bytes: 1, oprand1: \"R7\" },\r\n    { /* 0x20 */ opcode: \"JB\", bytes: 3, isCondJump: true, dasmOprand: dasmOpBitRel },\r\n    { /* 0x21 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x22 */ opcode: \"RET\", bytes: 1, isAbsJump: true },\r\n    { /* 0x23 */ opcode: \"RL\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x24 */ opcode: \"ADD\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x25 */ opcode: \"ADD\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x26 */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x27 */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x28 */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x29 */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x2A */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x2B */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x2C */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x2D */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x2E */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x2F */ opcode: \"ADD\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0x30 */ opcode: \"JNB\", bytes: 3, isCondJump: true, dasmOprand: dasmOpBitRel },\r\n    { /* 0x31 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x32 */ opcode: \"RETI\", bytes: 1, isAbsJump: true },\r\n    { /* 0x33 */ opcode: \"RLC\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0x34 */ opcode: \"ADDC\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x35 */ opcode: \"ADDC\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x36 */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x37 */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x38 */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x39 */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x3A */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x3B */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x3C */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x3D */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x3E */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x3F */ opcode: \"ADDC\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0x40 */ opcode: \"JC\", bytes: 2, isCondJump: true, dasmOprand: dasmOpRel },\r\n    { /* 0x41 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x42 */ opcode: \"ORL\", bytes: 2, oprand2: \"A\", dasmOprand: dasmOpDir },\r\n    { /* 0x43 */ opcode: \"ORL\", bytes: 3, dasmOprand: dasmOpDirImm },\r\n    { /* 0x44 */ opcode: \"ORL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x45 */ opcode: \"ORL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x46 */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x47 */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x48 */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x49 */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x4A */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x4B */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x4C */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x4D */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x4E */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x4F */ opcode: \"ORL\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0x50 */ opcode: \"JNC\", bytes: 2, isCondJump: true, dasmOprand: dasmOpRel },\r\n    { /* 0x51 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x52 */ opcode: \"ANL\", bytes: 2, oprand2: \"A\", dasmOprand: dasmOpDir },\r\n    { /* 0x53 */ opcode: \"ANL\", bytes: 3, dasmOprand: dasmOpDirImm },\r\n    { /* 0x54 */ opcode: \"ANL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x55 */ opcode: \"ANL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x56 */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x57 */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x58 */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x59 */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x5A */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x5B */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x5C */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x5D */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x5E */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x5F */ opcode: \"ANL\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0x60 */ opcode: \"JZ\", bytes: 2, isCondJump: true, dasmOprand: dasmOpRel },\r\n    { /* 0x61 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x62 */ opcode: \"XRL\", bytes: 2, oprand2: \"A\", dasmOprand: dasmOpDir },\r\n    { /* 0x63 */ opcode: \"XRL\", bytes: 3, dasmOprand: dasmOpDirImm },\r\n    { /* 0x64 */ opcode: \"XRL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x65 */ opcode: \"XRL\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x66 */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x67 */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x68 */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x69 */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x6A */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x6B */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x6C */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x6D */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x6E */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x6F */ opcode: \"XRL\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0x70 */ opcode: \"JNZ\", bytes: 2, isCondJump: true, dasmOprand: dasmOpRel },\r\n    { /* 0x71 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x72 */ opcode: \"ORL\", bytes: 2, oprand1: \"C\", dasmOprand: dasmOpXBit },\r\n    { /* 0x73 */ opcode: \"JMP\", bytes: 1, oprand1: \"@A+DPTR\", isAbsJump: true },\r\n    { /* 0x74 */ opcode: \"MOV\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x75 */ opcode: \"MOV\", bytes: 3, dasmOprand: dasmOpDirImm },\r\n    { /* 0x76 */ opcode: \"MOV\", bytes: 2, oprand1: \"@R0\", dasmOprand: dasmOpXImm },\r\n    { /* 0x77 */ opcode: \"MOV\", bytes: 2, oprand1: \"@R1\", dasmOprand: dasmOpXImm },\r\n    { /* 0x78 */ opcode: \"MOV\", bytes: 2, oprand1: \"R0\", dasmOprand: dasmOpXImm },\r\n    { /* 0x79 */ opcode: \"MOV\", bytes: 2, oprand1: \"R1\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7A */ opcode: \"MOV\", bytes: 2, oprand1: \"R2\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7B */ opcode: \"MOV\", bytes: 2, oprand1: \"R3\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7C */ opcode: \"MOV\", bytes: 2, oprand1: \"R4\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7D */ opcode: \"MOV\", bytes: 2, oprand1: \"R5\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7E */ opcode: \"MOV\", bytes: 2, oprand1: \"R6\", dasmOprand: dasmOpXImm },\r\n    { /* 0x7F */ opcode: \"MOV\", bytes: 2, oprand1: \"R7\", dasmOprand: dasmOpXImm },\r\n    { /* 0x80 */ opcode: \"SJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpRel },\r\n    { /* 0x81 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x82 */ opcode: \"ANL\", bytes: 2, oprand1: \"C\", dasmOprand: dasmOpXBit },\r\n    { /* 0x83 */ opcode: \"MOVC\", bytes: 1, oprand1: \"A\", oprand2: \"@A+PC\" },\r\n    { /* 0x84 */ opcode: \"DIV\", bytes: 1, oprand1: \"AB\" },\r\n    { /* 0x85 */ opcode: \"MOV\", bytes: 3, dasmOprand: dasmOpDirDir },\r\n    { /* 0x86 */ opcode: \"MOV\", bytes: 2, oprand2: \"@R0\", dasmOprand: dasmOpDir },\r\n    { /* 0x87 */ opcode: \"MOV\", bytes: 2, oprand2: \"@R1\", dasmOprand: dasmOpDir },\r\n    { /* 0x88 */ opcode: \"MOV\", bytes: 2, oprand2: \"R0\", dasmOprand: dasmOpDir },\r\n    { /* 0x89 */ opcode: \"MOV\", bytes: 2, oprand2: \"R1\", dasmOprand: dasmOpDir },\r\n    { /* 0x8A */ opcode: \"MOV\", bytes: 2, oprand2: \"R2\", dasmOprand: dasmOpDir },\r\n    { /* 0x8B */ opcode: \"MOV\", bytes: 2, oprand2: \"R3\", dasmOprand: dasmOpDir },\r\n    { /* 0x8C */ opcode: \"MOV\", bytes: 2, oprand2: \"R4\", dasmOprand: dasmOpDir },\r\n    { /* 0x8D */ opcode: \"MOV\", bytes: 2, oprand2: \"R5\", dasmOprand: dasmOpDir },\r\n    { /* 0x8E */ opcode: \"MOV\", bytes: 2, oprand2: \"R6\", dasmOprand: dasmOpDir },\r\n    { /* 0x8F */ opcode: \"MOV\", bytes: 2, oprand2: \"R7\", dasmOprand: dasmOpDir },\r\n    { /* 0x90 */ opcode: \"MOV\", bytes: 3, oprand1: \"DPTR\", dasmOprand: dasmOpXImm2 },\r\n    { /* 0x91 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0x92 */ opcode: \"MOV\", bytes: 2, oprand2: \"C\", dasmOprand: dasmOpBit },\r\n    { /* 0x93 */ opcode: \"MOVC\", bytes: 1, oprand1: \"A\", oprand2: \"@A+DPTR\" },\r\n    { /* 0x94 */ opcode: \"SUBB\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXImm },\r\n    { /* 0x95 */ opcode: \"SUBB\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0x96 */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0x97 */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0x98 */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0x99 */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0x9A */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0x9B */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0x9C */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0x9D */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0x9E */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0x9F */ opcode: \"SUBB\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0xA0 */ opcode: \"ORL\", bytes: 2, oprand1: \"C\", dasmOprand: dasmOpXNbit },\r\n    { /* 0xA1 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xA2 */ opcode: \"MOV\", bytes: 2, oprand1: \"C\", dasmOprand: dasmOpXBit },\r\n    { /* 0xA3 */ opcode: \"INC\", bytes: 1, oprand1: \"DPTR\" },\r\n    { /* 0xA4 */ opcode: \"MUL\", bytes: 1, oprand1: \"AB\" },\r\n    { /* 0xA5 */ opcode: \"<UNKNOWN>\", bytes: 1 },\r\n    { /* 0xA6 */ opcode: \"MOV\", bytes: 2, oprand1: \"@R0\", dasmOprand: dasmOpXDir },\r\n    { /* 0xA7 */ opcode: \"MOV\", bytes: 2, oprand1: \"@R1\", dasmOprand: dasmOpXDir },\r\n    { /* 0xA8 */ opcode: \"MOV\", bytes: 2, oprand1: \"R0\", dasmOprand: dasmOpXDir },\r\n    { /* 0xA9 */ opcode: \"MOV\", bytes: 2, oprand1: \"R1\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAA */ opcode: \"MOV\", bytes: 2, oprand1: \"R2\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAB */ opcode: \"MOV\", bytes: 2, oprand1: \"R3\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAC */ opcode: \"MOV\", bytes: 2, oprand1: \"R4\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAD */ opcode: \"MOV\", bytes: 2, oprand1: \"R5\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAE */ opcode: \"MOV\", bytes: 2, oprand1: \"R6\", dasmOprand: dasmOpXDir },\r\n    { /* 0xAF */ opcode: \"MOV\", bytes: 2, oprand1: \"R7\", dasmOprand: dasmOpXDir },\r\n    { /* 0xB0 */ opcode: \"ANL\", bytes: 2, oprand1: \"C\", dasmOprand: dasmOpXNbit },\r\n    { /* 0xB1 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xB2 */ opcode: \"CPL\", bytes: 2, dasmOprand: dasmOpBit },\r\n    { /* 0xB3 */ opcode: \"CPL\", bytes: 1, oprand1: \"C\" },\r\n    { /* 0xB4 */ opcode: \"CJNE\", bytes: 3, oprand1: \"A\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xB5 */ opcode: \"CJNE\", bytes: 3, oprand1: \"A\", isCondJump: true, dasmOprand: dasmOpXDirRel },\r\n    { /* 0xB6 */ opcode: \"CJNE\", bytes: 3, oprand1: \"@R0\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xB7 */ opcode: \"CJNE\", bytes: 3, oprand1: \"@R1\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xB8 */ opcode: \"CJNE\", bytes: 3, oprand1: \"R0\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xB9 */ opcode: \"CJNE\", bytes: 3, oprand1: \"R1\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBA */ opcode: \"CJNE\", bytes: 3, oprand1: \"R2\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBB */ opcode: \"CJNE\", bytes: 3, oprand1: \"R3\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBC */ opcode: \"CJNE\", bytes: 3, oprand1: \"R4\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBD */ opcode: \"CJNE\", bytes: 3, oprand1: \"R5\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBE */ opcode: \"CJNE\", bytes: 3, oprand1: \"R6\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xBF */ opcode: \"CJNE\", bytes: 3, oprand1: \"R7\", isCondJump: true, dasmOprand: dasmOpXImmRel },\r\n    { /* 0xC0 */ opcode: \"PUSH\", bytes: 2, dasmOprand: dasmOpDir },\r\n    { /* 0xC1 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xC2 */ opcode: \"CLR\", bytes: 2, dasmOprand: dasmOpBit },\r\n    { /* 0xC3 */ opcode: \"CLR\", bytes: 1, oprand1: \"C\" },\r\n    { /* 0xC4 */ opcode: \"SWAP\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0xC5 */ opcode: \"XCH\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0xC6 */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0xC7 */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0xC8 */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0xC9 */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0xCA */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0xCB */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0xCC */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0xCD */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0xCE */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0xCF */ opcode: \"XCH\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0xD0 */ opcode: \"POP\", bytes: 2, dasmOprand: dasmOpDir },\r\n    { /* 0xD1 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xD2 */ opcode: \"SETB\", bytes: 2, dasmOprand: dasmOpBit },\r\n    { /* 0xD3 */ opcode: \"SETB\", bytes: 1, oprand1: \"C\" },\r\n    { /* 0xD4 */ opcode: \"DA\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0xD5 */ opcode: \"DJNZ\", bytes: 3, isCondJump: true, dasmOprand: dasmOpDirRel },\r\n    { /* 0xD6 */ opcode: \"XCHD\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0xD7 */ opcode: \"XCHD\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0xD8 */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R0\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xD9 */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R1\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDA */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R2\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDB */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R3\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDC */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R4\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDD */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R5\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDE */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R6\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xDF */ opcode: \"DJNZ\", bytes: 2, oprand1: \"R7\", isCondJump: true, dasmOprand: dasmOpXRel },\r\n    { /* 0xE0 */ opcode: \"MOVX\", bytes: 1, oprand1: \"A\", oprand2: \"@DPTR\" },\r\n    { /* 0xE1 */ opcode: \"AJMP\", bytes: 2, isAbsJump: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xE2 */ opcode: \"MOVX\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0xE3 */ opcode: \"MOVX\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0xE4 */ opcode: \"CLR\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0xE5 */ opcode: \"MOV\", bytes: 2, oprand1: \"A\", dasmOprand: dasmOpXDir },\r\n    { /* 0xE6 */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"@R0\" },\r\n    { /* 0xE7 */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"@R1\" },\r\n    { /* 0xE8 */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R0\" },\r\n    { /* 0xE9 */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R1\" },\r\n    { /* 0xEA */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R2\" },\r\n    { /* 0xEB */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R3\" },\r\n    { /* 0xEC */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R4\" },\r\n    { /* 0xED */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R5\" },\r\n    { /* 0xEE */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R6\" },\r\n    { /* 0xEF */ opcode: \"MOV\", bytes: 1, oprand1: \"A\", oprand2: \"R7\" },\r\n    { /* 0xF0 */ opcode: \"MOVX\", bytes: 1, oprand1: \"@DPTR\", oprand2: \"A\" },\r\n    { /* 0xF1 */ opcode: \"ACALL\", bytes: 2, isCall: true, dasmOprand: dasmOpAbs },\r\n    { /* 0xF2 */ opcode: \"MOVX\", bytes: 1, oprand1: \"@R0\", oprand2: \"A\" },\r\n    { /* 0xF3 */ opcode: \"MOVX\", bytes: 1, oprand1: \"@R1\", oprand2: \"A\" },\r\n    { /* 0xF4 */ opcode: \"CPL\", bytes: 1, oprand1: \"A\" },\r\n    { /* 0xF5 */ opcode: \"MOV\", bytes: 2, oprand2: \"A\", dasmOprand: dasmOpDir },\r\n    { /* 0xF6 */ opcode: \"MOV\", bytes: 1, oprand1: \"@R0\", oprand2: \"A\" },\r\n    { /* 0xF7 */ opcode: \"MOV\", bytes: 1, oprand1: \"@R1\", oprand2: \"A\" },\r\n    { /* 0xF8 */ opcode: \"MOV\", bytes: 1, oprand1: \"R0\", oprand2: \"A\" },\r\n    { /* 0xF9 */ opcode: \"MOV\", bytes: 1, oprand1: \"R1\", oprand2: \"A\" },\r\n    { /* 0xFA */ opcode: \"MOV\", bytes: 1, oprand1: \"R2\", oprand2: \"A\" },\r\n    { /* 0xFB */ opcode: \"MOV\", bytes: 1, oprand1: \"R3\", oprand2: \"A\" },\r\n    { /* 0xFC */ opcode: \"MOV\", bytes: 1, oprand1: \"R4\", oprand2: \"A\" },\r\n    { /* 0xFD */ opcode: \"MOV\", bytes: 1, oprand1: \"R5\", oprand2: \"A\" },\r\n    { /* 0xFE */ opcode: \"MOV\", bytes: 1, oprand1: \"R6\", oprand2: \"A\" },\r\n    { /* 0xFF */ opcode: \"MOV\", bytes: 1, oprand1: \"R7\", oprand2: \"A\" }\r\n];\r\n\r\nfunction calculateRelData(data: number, ci: S.RealInstruction): number {\r\n    const offset = (data & 0x80) ? data - 0x100 : data;\r\n    return ci.address + ci.bytes.length + offset;\r\n}\r\n\r\nfunction createAddrOprand(data: number): S.TypedOprand {\r\n    return {\r\n        type: \"ADDR\",\r\n        length: 1,\r\n        data,\r\n        str: U.formatCodeAddress(data)\r\n    };\r\n}\r\n\r\nfunction createRelOprand(data: number, ci: S.RealInstruction): S.TypedOprand {\r\n    const jmp_target = calculateRelData(data, ci);\r\n    return {\r\n        type: \"ADDR\",\r\n        length: 1,\r\n        data: jmp_target,\r\n        raw_data: data,\r\n        str: U.formatCodeAddress(jmp_target)\r\n    };\r\n}\r\n\r\nfunction createDirOprand(data: number): S.TypedOprand {\r\n    return {\r\n        type: \"DIR\",\r\n        length: 1,\r\n        data,\r\n        str: U.formatDirectData(data)\r\n    };\r\n}\r\n\r\nfunction createBitOprand(data: number): S.TypedOprand {\r\n    return {\r\n        type: \"BIT\",\r\n        length: 1,\r\n        data,\r\n        str: U.formatBitData(data)\r\n    };\r\n}\r\n\r\nfunction createNbitOprand(data: number): S.TypedOprand {\r\n    return {\r\n        type: \"NBIT\",\r\n        length: 1,\r\n        data,\r\n        str: \"/\" + U.formatBitData(data)\r\n    };\r\n}\r\n\r\nfunction createImmOprand(data: number): S.TypedOprand {\r\n    return {\r\n        type: \"IMM\",\r\n        length: 1,\r\n        data,\r\n        str: U.formatImmediateData(data)\r\n    };\r\n}\r\n\r\nfunction createImm2Oprand(byte1: number, byte2: number): S.TypedOprand {\r\n    const data = (byte1 << 8) | byte2;\r\n    return {\r\n        type: \"IMM\",\r\n        length: 2,\r\n        data,\r\n        str: U.formatImmediateData2(data)\r\n    };\r\n}\r\n\r\nfunction dasmOpAbs(ci: S.RealInstruction) {\r\n    /* a10 a9 a8 0 0001   a7 a6 a5 a4 a3 a2 a1 a0 */\r\n    ci.oprand1 = createAddrOprand(((ci.bytes[0].data & 0xE0) << 3) | ci.bytes[1].data);\r\n    ci.jumpTarget = ci.oprand1.data;\r\n}\r\n\r\nfunction dasmOpBit(ci: S.RealInstruction) {\r\n    ci.oprand1 = createBitOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpBitRel(ci: S.RealInstruction) {\r\n    ci.oprand1 = createBitOprand(ci.bytes[1].data);\r\n    ci.oprand2 = createRelOprand(ci.bytes[2].data, ci);\r\n    ci.jumpTarget = ci.oprand2.data;\r\n}\r\n\r\nfunction dasmOpDir(ci: S.RealInstruction) {\r\n    ci.oprand1 = createDirOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpDirDir(ci: S.RealInstruction) {\r\n    ci.oprand1 = createDirOprand(ci.bytes[1].data);\r\n    ci.oprand2 = createDirOprand(ci.bytes[2].data);\r\n}\r\n\r\nfunction dasmOpDirImm(ci: S.RealInstruction) {\r\n    ci.oprand1 = createDirOprand(ci.bytes[1].data);\r\n    ci.oprand2 = createImmOprand(ci.bytes[2].data);\r\n}\r\n\r\nfunction dasmOpDirRel(ci: S.RealInstruction) {\r\n    ci.oprand1 = createDirOprand(ci.bytes[1].data);\r\n    ci.oprand2 = createRelOprand(ci.bytes[2].data, ci);\r\n    ci.jumpTarget = ci.oprand2.data;\r\n}\r\n\r\nfunction dasmOpLaddr(ci: S.RealInstruction) {\r\n    ci.oprand1 = createAddrOprand((ci.bytes[1].data << 8) | ci.bytes[2].data);\r\n    ci.jumpTarget = ci.oprand1.data;\r\n}\r\n\r\nfunction dasmOpRel(ci: S.RealInstruction) {\r\n    ci.oprand1 = createRelOprand(ci.bytes[1].data, ci);\r\n    ci.jumpTarget = ci.oprand1.data;\r\n}\r\n\r\nfunction dasmOpXBit(ci: S.RealInstruction) {\r\n    ci.oprand2 = createBitOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpXDir(ci: S.RealInstruction) {\r\n    if (!ci.bytes[1]) debugger;\r\n    ci.oprand2 = createDirOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpXDirRel(ci: S.RealInstruction) {\r\n    ci.oprand2 = createDirOprand(ci.bytes[1].data);\r\n    ci.oprand3 = createRelOprand(ci.bytes[2].data, ci);\r\n    ci.jumpTarget = ci.oprand3.data;\r\n}\r\n\r\nfunction dasmOpXImm(ci: S.RealInstruction) {\r\n    ci.oprand2 = createImmOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpXImm2(ci: S.RealInstruction) {\r\n    ci.oprand2 = createImm2Oprand(ci.bytes[1].data, ci.bytes[2].data);\r\n}\r\n\r\nfunction dasmOpXImmRel(ci: S.RealInstruction) {\r\n    ci.oprand2 = createImmOprand(ci.bytes[1].data);\r\n    ci.oprand3 = createRelOprand(ci.bytes[2].data, ci);\r\n    ci.jumpTarget = ci.oprand3.data;\r\n}\r\n\r\nfunction dasmOpXNbit(ci: S.RealInstruction) {\r\n    ci.oprand2 = createNbitOprand(ci.bytes[1].data);\r\n}\r\n\r\nfunction dasmOpXRel(ci: S.RealInstruction) {\r\n    ci.oprand2 = createRelOprand(ci.bytes[1].data, ci);\r\n    ci.jumpTarget = ci.oprand2.data;\r\n}\r\n"],"sourceRoot":""}